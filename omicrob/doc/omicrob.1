.TH OMICROB 1

.SH NAME
omicrob \- OCaml compiler and linker for Micro-controller Boards

.SH SYNOPSIS
  omicrob [ OPTIONS ] -c <src.mli>                 (compile .mli  -> .cmi  using ocamlc)
  omicrob [ OPTIONS ] -c <src.ml>                  (compile .ml   -> .cmo  using ocamlc)
  omicrob [ OPTIONS ] <src.cmo> -o <out.byte>      (compile .cmo  -> .byte using ocamlc)
  omicrob [ OPTIONS ] <in.byte> -o <out.c>         (compile .byte -> .c    using bc2c)
  omicrob [ OPTIONS ] <in.c> -o <out.elf>          (compile .c    -> .elf  using c++)
  omicrob [ OPTIONS ] <in.c> -o <out.avr>          (compile .c    -> .avr  using c++ for avr)
  omicrob [ OPTIONS ] <in.avr> -o <out.hex>        (compile .avr  -> .hex  using objcopy for avr)
  omicrob [ OPTIONS ] -simul <in.elf> [ sim_prog ] (execute the program in simulation mode)
  omicrob [ OPTIONS ] -flash <in.hex>              (flash the micro-controller using avrdude)

.SH DESCRIPTION

The \fBomicrob\fR(1) command compiles, links, run for simulation and flash an OCaml program for avr.

It just runs the following commands with right arguments and in the right environment:

  - \fBocamlc\fR(1)        to compile and link OCaml programs into a bytecode file
  - \fBocamlclean\fR(1)    to clean ocaml bytecode
  - \fBbc2c\fR(1)          to generate a C file from an OCaml bytecode file
  - \fBg++\fR(1)           to compile the generated C file for x86 architectures
  - \fBavr-g++\fR(1)       to compile the generated C file for avr architectures
  - \fBavr-objcopy\fR(1)   to convert a .avr file into a .hex file ready to be flashed
  - \fBavrdude\fR(1)       to flash avr micro-controllers


.SH OPTIONS

The following command-line options are recognized by \fBomicrob(1)\fR:

  -c                           Compile only
  -i                           Print inferred interface of a .ml file
  -o <file>                    Set output file
  -n                           Just print commands, do not execute them
  -v                           Be verbose, print executed commands
  -local                       Use the OMicroB build directory instead of installation directory
  -trace                       Set verbosity of traces: print informations about execution at runtime (default: 0)
  -sudo                        Use sudo when flashing the micro-controller with avrdude
  -simul                       Execute the program in simulation mode on the computer
  -flash                       Transfer the program to the micro-controller with avrdude

  -device <device-name>        Set the device to compile for; see -list-devices
  -list-devices                List available devices

  -stack-size <word-nb>        Set stack size (default: 64)
  -heap-size <word-nb>         Set heap size (default: 256)
  -gc <gc-algo>                Set garbage collector algorithm Stop&Copy or Mark&Compact (default: MAC)
  -arch <bit-nb>               Set virtual machine architecture (default: 32)

  -mlopt <option>              Pass the given option to the OCaml compiler
  -mlopts <opt1,opt2,...>      Pass the given options to the OCaml compiler
  -cxxopt <option>             Pass the given option to the C compiler                                                                                                      
  -cxxopts <opt1,opt2,...>     Pass the given options to the C compiler                                                                                                     
  -avrcxxopt <option>          Pass the given option to the AVR C++ compiler                                                                                                
  -avrcxxopts <opt1,opt2,...>  Pass the given options to the AVR C++ compiler                                                                                               
  -avrobjcopt <option>         Pass the given option to the AVR objcopy tool                                                                                                
  -avrobjcopts <opt1,opt2,...> Pass the given options to the AVR objcopy tool
  -avrdudeopt <option>         Pass the given option to the avrdude flashing program
  -avrdudeopts <opt1,opt2,...> Pass the given options to the avrdude flashing program

  -where                       Print location of standard library and exit
  -ocaml                       Print location of OCaml toplevel and exit
  -ocamlc                      Print location of OCaml bytecode compiler and exit
  -ocamlclean                  Print location of ocamlclean and exit
  -bc2c                        Print location of bc2c and exit
  -cxx                         Print location of C compiler and exit
  -avr-c++                     Print location of AVR C++ compiler and exit
  -avr-objcopy                 Print location of avr-objcopy and exit
  -avrdude                     Print location of avrdude and exit

  -version                     Print version and exit
  -help                        Print list of options and exit

.SH EXAMPLES
To compile the file program written in src1.ml and src2.ml into example.elf (for simulation), example.hex (for the micro-controller), run:

        omicrob src1.ml src2.ml -o example.elf -o example.hex

which is a shortcut for:

        omicrob -c src1.ml
        omicrob -c src2.ml
        omicrob src1.cmo src2.cmo -o example.byte
        omicrob example.byte -o example.c
        omicrob example.c -o example.elf
        omicrob example.c -o example.avr
        omicrob example.avr -o example.hex

To compile and simulate a single file program written in test.ml, run:

        omicrob -simul test.ml

To compile and flash a single file program written in test.ml, run:

        omicrob -flash test.ml

If access to "/dev/..." needs root rights, run instead:

        omicrob -flash -sudo test.ml

.SH SEE ALSO
.BR ocamlc\fR(1),\ \fBocamlclean\fR(1),\ \fBbc2c\fR(1),\ \fBavr-g++\fR(1),\ \fBavr-objcopy\fR(1),\ \fBavrdude\fR(1),\ \fBocapic\fR(1)
